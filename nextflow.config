/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/nextvirus Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {
    // TODO nf-core: Specify your pipeline's command line flags
    // Input options
    input                         = null
    outdir                        = "output"
    mode                          = "all"                // ["all"]
    input_contigs                 = false                // false or path to contigs file
    reads_type                    = "raw"                // ["raw", "clean"]

    // =============================  Database  ====================================
    db                            = "/cpfs01/projects-HDD/cfff-47998b01bebd_HDD/rj_24212030018/db"

    // =============================  ViroProfiler modules  ====================================
    use_abricate                  = false
    use_decontam                  = false
    use_eggnog                    = true
    use_dram                      = false
    use_iphop                     = true
    use_kraken2                   = true
    use_phamb                     = true
    use_trimmomatic               = true

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '500.GB'
    max_cpus                   = 200
    max_time                   = '240.h'
}

rocess {
    withLabel: setup {
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 8.GB * task.attempt, 'memory') }
        time = { check_max( 12.h * task.attempt, 'time') }
    }

    withName: ABRICATE {
        cpus = { check_max( 8 * task.attempt, 'cpus') }
        memory = { check_max( 10.GB * task.attempt, 'memory') }
        time = { check_max( 12.h * task.attempt, 'time') }
    }

    withName: ABUNDANCE {
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 2.GB * task.attempt, 'memory') }
        time = { check_max( 12.h * task.attempt, 'time') }
    }

    withName: BACPHLIP {
        ext.args = "--multi_fasta"
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 2.GB * task.attempt, 'memory') }
        time = { check_max( 12.h * task.attempt, 'time') }
    }
    
    withName: CHECKV {
        cpus = { check_max( 8 * task.attempt, 'cpus') }
        memory = { check_max( 20.GB * task.attempt, 'memory') }
        time = { check_max( 12.h * task.attempt, 'time') }
    }

    withName: CONTIGLIB {
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 4.GB * task.attempt, 'memory') }
        time = { check_max( 12.h * task.attempt, 'time') }
    }

    withName: CONTIGLIB_CLUSTER {
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 4.GB * task.attempt, 'memory') }
        time = { check_max( 12.h * task.attempt, 'time') }
    }

    withName: DB_DRAM {
        cpus ={ check_max( 2 * task.attempt, 'cpus') }
        memory = { check_max( 10.GB * task.attempt, 'memory') }
        time = { check_max( 30.h * task.attempt, 'time') }
    }

    withName: DB_KRAKEN2 {
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 1.GB * task.attempt, 'memory') }
        time = { check_max( 12.h * task.attempt, 'time') }
    }

    withName: DB_VIBRANT {
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 4.GB * task.attempt, 'memory') }
        time = { check_max( 12.h * task.attempt, 'time') }
    }

    withName: DB_VIRSORTER2 {
        cpus = { check_max( 8 * task.attempt, 'cpus') }
        memory = { check_max( 20.GB * task.attempt, 'memory') }
        time = { check_max( 12.h * task.attempt, 'time') }
    }

    withName: DB_VREFSEQ {
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 4.GB * task.attempt, 'memory') }
        time = { check_max( 12.h * task.attempt, 'time') }
    }

    withName: DECONTAM {
        ext.args = 'maxindel=1 bwr=0.16 bw=12 quickmatch fast minhits=2 qtrim=rl trimq=10 pigz=True untrim'
        cpus = { check_max( 2 * task.attempt, 'cpus') }
        memory = { check_max( 30.GB * task.attempt, 'memory') }
        time = { check_max( 12.h * task.attempt, 'time') }
    }

    withName: DRAMV {
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 6.GB * task.attempt, 'memory') }
        time = { check_max( 30.h * task.attempt, 'time') }
    }

    withName: DVF {
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 4.GB * task.attempt, 'memory') }
        time = { check_max( 20.h * task.attempt, 'time') }
    }

    withName: EMAPPER {
        cpus = { check_max( 8 * task.attempt, 'cpus') }
        memory = { check_max( 20.GB * task.attempt, 'memory') }
        time = { check_max( 30.h * task.attempt, 'time') }
    }

    withName: FASTQC {
        ext.args = '--quiet'
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 2.GB * task.attempt, 'memory') }
        time = { check_max( 12.h * task.attempt, 'time') }
    }

    withName: FASTP {
        ext.args = "--detect_adapter_for_pe -p -n 1 -l 30 -5 -W 4 -M 20 -r -c -g -x"
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 2.GB * task.attempt, 'memory') }
        time = { check_max( 12.h * task.attempt, 'time') }
    }
    
    withName: REMOVE {
        ext.args = "--very sensitive"
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 2.GB * task.attempt, 'memory') }
        time = { check_max( 12.h * task.attempt, 'time') }
    }

    withName: GENEPRED {
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 2.GB * task.attempt, 'memory') }
        time = { check_max( 12.h * task.attempt, 'time') }
    }

    withName: MAPPING2CONTIGS {
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 4.GB * task.attempt, 'memory') }
        time = { check_max( 12.h * task.attempt, 'time') }
    }

    withName: MICOMPLETEDB {
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 4.GB * task.attempt, 'memory') }
        time = { check_max( 12.h * task.attempt, 'time') }
    }

    withName: MULTIQC {
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 1.GB * task.attempt, 'memory') }
        time = { check_max( 12.h * task.attempt, 'time') }
    }

    withName: NRSEQS {
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 4.GB * task.attempt, 'memory') }
        time = { check_max( 12.h * task.attempt, 'time') }
    }

    withName: TRIMMOMATIC {
        ext.args = 'ILLUMINACLIP:TruSeq3-PE.fa:2:30:10 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:36'
    }
    
    withName: PHAMB_RF {
        cpus = { check_max( 2 * task.attempt, 'cpus') }
        memory = { check_max( 8.GB * task.attempt, 'memory') }
        time = { check_max( 12.h * task.attempt, 'time') }
    }

    withName: REPLIDEC {
        cpus = { check_max( 2 * task.attempt, 'cpus') }
        memory = { check_max( 4.GB * task.attempt, 'memory') }
        time = { check_max( 30.h * task.attempt, 'time') }
    }

    withName: SPADES {
        ext.args = "--meta"
        cpus = { check_max( 8 * task.attempt, 'cpus') }
        memory = { check_max( 50.GB * task.attempt, 'memory') }
        time = { check_max( 30.h * task.attempt, 'time') }
    }

    withName: TAXONOMY_MERGE {
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 1.GB * task.attempt, 'memory') }
        time = { check_max( 12.h * task.attempt, 'time') }
    }

    withName: TAXONOMY_MMSEQS {
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 6.GB * task.attempt, 'memory') }
        time = { check_max( 12.h * task.attempt, 'time') }
    }

    withName: TAXONOMY_VCONTACT {
        cpus = { check_max( 8 * task.attempt, 'cpus') }
        memory = { check_max( 20.GB * task.attempt, 'memory') }
        time = { check_max( 30.h * task.attempt, 'time') }
    }

    withName: VAMB {
        cpus = { check_max( 8 * task.attempt, 'cpus') }
        memory = { check_max( 20.GB * task.attempt, 'memory') }
        time = { check_max( 20.h * task.attempt, 'time') }
    }

    withName: VIBRANT {
        cpus = { check_max( 8 * task.attempt, 'cpus') }
        memory = { check_max( 20.GB * task.attempt, 'memory') }
        time = { check_max( 20.h * task.attempt, 'time') }
    }

    withName: VIRALHOST_IPHOP {
        cpus = { check_max( 8 * task.attempt, 'cpus') }
        memory = { check_max( 40.GB * task.attempt, 'memory') }
        time = { check_max( 40.h * task.attempt, 'time') }
    }

    withName: VIRSORTER2 {
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 4.GB * task.attempt, 'memory') }
        time = { check_max( 40.h * task.attempt, 'time') }
    }

    withName: VOGDB {
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 4.GB * task.attempt, 'memory') }
        time = { check_max( 12.h * task.attempt, 'time') }
    }

    withName: VRHYME {
        ext.args = "--method longest"
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 4.GB * task.attempt, 'memory') }
        time = { check_max( 12.h * task.attempt, 'time') }
    }
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'
profiles {
    debug {
        dumpHashes              = true
        process.beforeScript    = 'echo $HOSTNAME'
        cleanup                 = false
        nextflow.enable.configProcessNamesValidation = true
    }
    conda {
        conda.enabled           = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        conda.channels          = ['conda-forge', 'bioconda', 'defaults']
        apptainer.enabled       = false
    }
    mamba {
        conda.enabled           = true
        conda.useMamba          = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    docker {
        docker.enabled          = true
        conda.enabled           = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
        docker.runOptions       = '-u $(id -u):$(id -g)'
    }
    arm {
        docker.runOptions       = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled     = true
        singularity.autoMounts  = true
        conda.enabled           = false
        docker.enabled          = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    podman {
        podman.enabled          = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    shifter {
        shifter.enabled         = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    charliecloud {
        charliecloud.enabled    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        apptainer.enabled       = false
    }
    apptainer {
        apptainer.enabled       = true
        apptainer.autoMounts    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
    }
    wave {
        apptainer.ociAutoPull   = true
        singularity.ociAutoPull = true
        wave.enabled            = true
        wave.freeze             = true
        wave.strategy           = 'conda,container'
    }
    gitpod {
        executor.name           = 'local'
        executor.cpus           = 4
        executor.memory         = 8.GB
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
}


// Nextflow plugins
plugins {
    id 'nf-validation@1.1.3' // Validation of pipeline parameters and creation of an input channel from a sample sheet
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    NXF_HOME='$PWD'
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')


timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'nf-core/nextvirus'
    author          = """Justin"""
    homePage        = 'https://github.com/nf-core/nextvirus'
    description     = """virus_pipline for TonyWuLab"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = '1.0dev'
    doi             = ''
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
